    module game

    define FaceStand       0
    define FaceWalk        1
    define BackStand       2
    define BackWalk        3
    define SideStand       4
    define SideWalk1       5
    define SideWalk2       6

    define DirectionFace    0b000
    define DirectionBack    0b010
    define DirectionRight   0b001
    define DirectionLeft    0b011

adjacent_object dw 0
total_steps dw 0

; sets Z if no object found
find_next_drawable_object:
    ld hl, game_objects
    ld b, 0xff ; best y
    ld de, 0 ; best object

.loop
    ld c, (hl)
    inc hl
    ld a, (hl)
    or a
    jr z, .end_loop

    bit 7, a
    jr z, .next_object

    push de
    ld e, c
    ld d, a
    ld a, (de)
    cp b
    jr nc, .next_object_pop

    ld b, a ; new best y
    pop af ; discard the previous object from the stack
    ld ix, hl
    inc hl
    jr .loop
.next_object_pop
    pop de
.next_object
    inc hl
    jr .loop

.end_loop
    ld a, d
    or a  ; set Z if no object found
    ret z

    ex de, hl
    ld a, (ix)
    and 0x7f
    ld (ix), a
    ret

draw_objects:
    ld hl, game_objects

.draw_loop
    call find_next_drawable_object
    jr z, .clear
    call map.draw_object
    jr .draw_loop

.clear
    ld hl, game_objects
.clear_loop
    inc hl
    ld a, (hl)
    or a
    ret z
    or 0x80
    ld (hl), a
    inc hl
    jr .clear_loop

stop_hero:
    ld a, (objects.hero.state)
    or a
    ret z

    xor a
    ld (objects.hero.state), a
    ld a, (objects.hero.state+1)   ; direction

    cp DirectionFace
    jr nz, 1F

    xor a
    ld e, a
    jr .update

1
    cp DirectionBack
    jr nz, 2F
    xor a
    ld e, BackStand
    jr .update

2
    ld e, SideStand
    rra

.update
    ld ix, objects.hero
    ; ld (ix + object.mirror), 0
    ld a, e
    call objects.update_sprite

    ld (ix + object.state), 0
    ret

move_hero_right:
    ld a, (objects.hero.state + 1)
    cp DirectionRight
    jr z, 1F

    ; init moving state
    xor a
    ld (objects.hero.state), a
    xor a
    ld (objects.hero.mirror), a

    ld a, DirectionRight
    ld (objects.hero.state + 1), a

    ld a, 1
    ld e, SideStand
    jr .update

1
    ld a, (objects.hero.state)
    and 0xf
    cp 1
    jr nz, 2F

    ld a, 2
    ld e, SideWalk1
    jr .update

2
    ld hl, beeper.step_sound
    call beeper.play_sfx
    call map.move_hero_right
    call log_steps
    ld a, 1
    ld e, SideWalk2

.update
    ld ix, objects.hero
    ld (ix + object.state), a
    ld a, e
    call objects.update_sprite
    ret

move_hero_left:
    ld a, (objects.hero.state + 1)
    cp DirectionLeft
    jr z, 1F

    ; init moving state
    ld a, DirectionLeft
    ld (objects.hero.state + 1), a

    ld a, 1
    ld  (objects.hero.mirror), a
    ld e, SideStand
    jr .update

1
    ld a, (objects.hero.state)
    and 0xf
    cp 1
    jr nz, 2F

    ld a, 2
    ld e, SideWalk1
    jr .update

2
    ld hl, beeper.step_sound
    call beeper.play_sfx
    call map.move_hero_left
    call log_steps
    ld a, 1
    ld e, SideWalk2

.update
    ld ix, objects.hero
    ld (ix + object.state), a
    ld a, e
    call objects.update_sprite
    ret

move_hero_down:
    ld ix, objects.hero

    ld a, (objects.hero.state + 1)
    cp DirectionFace
    jr z, 1F

    ; init moving state
    ld a, DirectionFace
    ld (objects.hero.state + 1), a

    xor a
    ld (objects.hero.mirror), a
    inc a
    ld de, FaceStand
    jr .update

1
    ld a, (objects.hero.state)
    and 0xf
    cp 1
    jr nz, 2F

    ld a, 2
    ld de, FaceWalk
    jr .update

2
    ld hl, beeper.step_sound
    call beeper.play_sfx
    call map.move_hero_down
    call log_steps
    ld a, 1
    ld de, 0x100 + FaceWalk

.update
    ld (ix + object.state), a
    ld (ix + object.mirror), d
    ld a, e
    call objects.update_sprite
    ret

move_hero_up:
    ld ix, objects.hero

    ld a, (objects.hero.state + 1)
    cp DirectionBack
    jr z, 1F

    ; init moving state
    ld a, DirectionBack
    ld (objects.hero.state + 1), a

    xor a
    ld (objects.hero.mirror), a
    ld de, BackStand
    inc a
    jr .update

1
    ld a, (objects.hero.state)
    and 0xf
    cp 1
    jr nz, 2F

    ld a, 2
    ld de, BackWalk
    jr .update

2
    ld hl, beeper.step_sound
    call beeper.play_sfx
    call map.move_hero_up
    call log_steps
    ld a, 1
    ld de, 0x100 + BackWalk

.update
    ld (ix + object.state), a
    ld (ix + object.mirror), d
    ld a, e
    jp objects.update_sprite

log_steps:
    ret
	ld hl, game.total_steps
	inc (hl)
	ld hl, i18n.step
    push ix
    ld ix, default_console
	call console.println
    pop ix
    ret


    endmodule

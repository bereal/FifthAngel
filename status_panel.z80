    module panel

panel_console:
    console.console {
       {
        0x4037, 0x5837,
        23, 1, 22, 8
       },
       0x4037, 23, 1, 22, 0
    }

activate:
    push ix
    ld ix, panel_console
    ld a, 0x47
    call screen.color_area_border
    pop ix
    ret

deactivate:
    push ix
    push af
    ld ix, panel_console
    ld a, 7
    call screen.color_area_border
    pop af
    pop ix
    ret

draw_inventory:
    push ix
    ld ix, panel_console
    call console.clear

    ld hl, i18n.inventory
    call console.println

    ld hl, INVENTORY_START
    ld de, 0x117
    ld b, 0

.loop
    ld a, (hl)
    or a
    jr z, .end

    push hl
    call inventory.resolve_item
    ld iy, hl
    ld hl, (iy + 2)
    call console.println
    inc b
    pop hl
    inc hl
    jr .loop

.end
    ld a, b
    or a
    jr nz, 1F
    ld hl, i18n.empty_inventory
    call console.println
1
    pop ix
    ret

; hl - list of lines
; de - title
open_menu:
    push ix
    ld ix, panel_console
    call activate
    call console.clear
    ld b, 0 ; count items

    ex de, hl
    call console.println
    call console.newline ; print title
    ex de, hl

.loop
    ld e, (hl)
    inc hl
    ld a, (hl)
    or a
    jr z, .printed

    ld d, a
    ex de, hl
    call console.println
    inc b
    ex de, hl
    inc hl
    jr .loop

.printed

    dec b
    ld c, 0 ; selected item

.select_loop
    .10 halt
    ld a, c
    add 2
    call screen.invert_row
1
    call read_key
    jr z, 1B
    cp 'A'
    jr nz, .not_down
    ld a, c
    cp b
    jr nc, 1B
    add 2
    call screen.invert_row
    inc c
    jr .select_loop

.not_down
    cp 'Q'
    jr nz, .not_up
    ld a, c
    or a
    jr z, 1B
    add 2
    call screen.invert_row
    dec c
    jr .select_loop

.not_up
    cp 'M'
    jr z, .activate
    cp ' '
    jr nz, 1B

.activate
    ld a, c
    add 2
    call screen.invert_row
    call deactivate
    ld a, c
    pop ix

    ret

    endmodule
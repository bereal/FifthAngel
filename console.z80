		module console

	struct console
area	screen.area
cur_addr	word
cur_col     byte
cur_row     byte
free_rows   byte
pending_newline byte
rotation byte
	ends

default_console:
	console

; ix - console
; hl - screen row / col
; de - screen width / height
; a - attribute (zero is ignored)
init:
	push af
	ld (ix + console.cur_col), hl
	ld a, e
	ld (ix + console.free_rows), a

	call screen.init_area

	ld hl, (ix + screen.area.bitmap)
	ld (ix + console.cur_addr), hl

	xor a
	ld (ix + console.rotation), a
	pop af
	or a
	call nz, screen.set_area_attr
	ret

; ix - console
clear:
	call screen.clean_area
	ld hl, (ix + console.area.column)
	ld (ix + console.cur_col), hl
	xor a
	ld (ix + console.pending_newline), a
	ld a, (ix + console.area.height)
	ld (ix + console.free_rows), a
	ret

; invert_row:
; 	ld ix, area
; 	jp screen.invert_row

newline:
	push hl

	ld a, (ix + console.free_rows)
	dec a
	jr z, .scroll

	ld (ix + console.free_rows), a

	ld hl, (ix + console.cur_col)
	inc h
	ld (ix + console.cur_col), hl
	jr .end

.scroll:
	call screen.scroll_area_up
	ld hl, (ix + console.cur_col)

.end
	call screen.pos_to_bitmap_addr
	ld (ix + console.cur_addr), hl
	ld (ix + console.rotation), 0

	pop hl
	ret

set_font:
	ld (print_letter.font_setter + 1), hl
	ret

print_letter:
	push af
	push bc
	push de
	push hl

	ex af, af'
	ld a, (ix + console.pending_newline)
	or a
	jr z, 2F
	ld b, a
1
	call newline
	djnz 1B
	ld (ix + console.pending_newline), 0
2
	ex af, af'
	cp 0x0b
	jr nc, .regular

;; special character
	cp 0x0a 							;; eol
	jr nz, .special_1
	inc (ix + console.pending_newline)
	jr .exit

.special_1:
	cp 8
	jr nz, .exit 							;; unknown code, ignore
	ld a, - 1
	jp .update_position

.regular:
	sub 0x20
	bit 7, a
	jr z, 1F
	sub 0x20

1
	ld l, a
	ld h, 0
	.3 add hl, hl
.font_setter:
	ld de, 0 							;; self-modified
	add hl, de
	ld d, h
	ld e, l 							;; de - char description
	ld hl, (ix + console.cur_addr)
	inc h
	ld c, 7

.letter_loop:
	push bc
	ld a, (de)
	ld b, (ix + console.rotation)
	inc b
	ld c, 0
1
	rra
	rr c
	djnz 1B

	or (hl)
	ld (hl), a
	inc hl
	ld a, c
	or (hl)
	ld (hl), a
	dec hl

	inc h
	inc de

	pop bc
	dec c
	jr nz, .letter_loop

	ld a, (de)
	inc a

.update_position:
	ld c, a
	ld a, (ix + console.rotation)
	add c
	bit 7, a
	jr z, .shift_right
	dec (ix + console.cur_addr)
	add 8
	jr .save_rotation
.shift_right:
	cp 8
	jr c, .save_rotation
	inc (ix + console.cur_addr)
	sub 8

.save_rotation:
	ld (ix + console.rotation), a

.exit:
	pop hl, de, bc, af
	ret


printf:
	ld a, (hl)
	or a
	jr z, .exit
	cp 8 								; <8 are escape sequences
	call nc, print_letter
	inc hl
	cp 1
	jr nz, 2F
	ld a, (ix + console.rotation)
	dec a
	and 7
	ld (ix + console.rotation), a

	cp 7
	jr nz, printf:
	dec (ix + console.cur_addr)
	jp printf:

2
	cp 2
	jr nz, printf:
	call print_decimal
	.2 inc hl
	jp printf:

.exit
	ret

print_decimal:
; (hl) - address of int variable
; af is not preserved
	push bc, de, hl

	ld de, decimal_buf
	ld a, 7 							; unused special char, will be ignored
	ld (de), a
	inc de
	ld (de), a
	inc de
	ld (de), a
	inc de
	ld (de), a
	inc de
	ld a, '0'
	ld (de), a
	ld de, decimal_buf

; ld hl, ((hl))
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a
	ld a, (hl)
	inc hl
	ld h, (hl)
	ld l, a

	ld bc, - 10000
	call dec_char
	ld bc, - 1000
	call dec_char
	ld bc, - 100
	call dec_char
	ld bc, - 10
	call dec_char
	ld c, b
	call dec_char

	ld hl, decimal_buf
	call printf:
	pop hl, de, bc
	ret
dec_char:
	ld a, - 1
dec_char_1:
	inc a
	add hl, bc
	jr c, dec_char_1
	sbc hl, bc

	or a
	jr z, dec_char_skip
	add '0'
	ld (de), a
dec_char_skip:
	inc de
	ret

decimal_buf:
	defb    0,0,0,0,0,0

println:
    push af, de, hl
	call printf
	inc (ix + console.pending_newline)
	pop hl, de, af
	ret

border_corner_top_left:
	db 0, 0
	dg ..xxxx..
	dg ..x..xxx
	dg ..x.xxxx
	dg ..xxxx..
	dg ...xx...
	dg ...xx...

border_corner_top_right:
	db 0, 0
	dg ..xxxx..
	dg xxx..x..
	dg xxx.xx..
	dg ..xxxx..
	dg ...xx...
	dg ...xx...

border_corner_bottom_left:
	dg ...xx...
	dg ...xx...
	dg ..xxxx..
	dg ..x..xxx
	dg ..x.xxxx
	dg ..xxxx..
	db 0, 0

border_corner_bottom_right:
	dg ...xx...
	dg ...xx...
	dg ..xxxx..
	dg xxx..x..
	dg xxx.xx..
	dg ..xxxx..
	db 0, 0

border_horizontal:
	db 0, 0, 0, 0xff, 0xff, 0, 0, 0

border_vertical:
	.8 dg ...xx...
draw_cell
	push bc
	ld b, 8
1
	ld a, (de)
	ld (hl), a
	inc h
	inc de
	djnz 1B
	pop bc
	ret

; h - row
; l - column
; b - width
; c - height
draw_border:
	call screen.pos_to_bitmap_addr
	.2 dec b
	.2 dec c

	push bc
	push hl
	; draw top left corner
	ld de, border_corner_top_left
	push hl
	call draw_cell
	pop hl

	; draw horizontal line
	inc hl
	push bc
1
	ld de, border_horizontal
	push hl
	call draw_cell
	pop hl
	inc hl
	djnz 1B

	ld de, border_corner_top_right
	call draw_cell
	correct_down_line h, l

2
	ld de, border_vertical
	call draw_cell
	correct_down_line h, l
	dec c
	jr nz, 2B

	pop bc

	ld de, border_corner_bottom_right
	call draw_cell

	pop hl
	down_row h, l
3
	ld de, border_vertical
	call draw_cell
	correct_down_line h, l
	dec c
	jr nz, 3B


	push hl
	ld de, border_corner_bottom_left
	call draw_cell
	pop hl
	pop bc

	; draw bottom horizontal line
	inc hl
1
	ld de, border_horizontal
	push hl
	call draw_cell
	pop hl
	inc hl
	djnz 1B

	ret

	endmodule

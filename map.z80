	module map

	;; sizes in tiles
	define MapSize 32
	define BufferAddr 0xc000
	define Buffer_TW 12
	define Buffer_TH 12
	define VisibleBuffer_TW 11
	define VisibleBuffer_TH 11

	define BufferedCellSize 3
	define TileSize 2
	define TileRowSize 6
	define BufferRowSize TileRowSize * Buffer_TW
	define BufferSize BufferRowSize * Buffer_TH * TileSize
	define LastTileRowOffset TileRowSize * (Buffer_TH - 1) * Buffer_TW * TileSize

@dirty_screen:
	db 0

visible_offset:
.column db 0
.row db 0

map_coord:
	db 0, 0

buffered_map_addr:
	dw test_level

test_level:
	include "res/test_level.z80"

	macro resolve_tile
		ld a, (hl)
		ld hl, tiles_table
		ld c, a
		ld b, 0
		add hl, bc
		add hl, bc

		ld a, (hl)
		inc hl
		ld h, (hl)
		ld l, a
	endm

	macro prepare_tile
		resolve_tile

		.TileRowSize ldi

		ex de, hl
		ld bc, TileRowSize * (Buffer_TW - 1)
		add hl, bc
		ex de, hl

		.TileRowSize ldi
	endm


prepare_tile:
	prepare_tile
	ret

prepare_map_row:
	ld b, Buffer_TW
.loop
	push bc
	push hl

	prepare_tile

	ex de, hl
	ld bc, - TileRowSize * Buffer_TW
	add hl, bc
	ex de, hl

	pop hl
	inc hl
	pop bc
	djnz .loop

	ret

prepare_map_column:
	ld b, Buffer_TW
.loop
	push bc
	push hl

	prepare_tile

	ex de, hl
	ld bc, TileRowSize * (Buffer_TW - 1)
	add hl, bc
	ex de, hl


	pop hl
	ld bc, MapSize
	add hl, bc
	pop bc
	djnz .loop

	ret

; assume that the buffer is scrolled maximum to the right
scroll_buffer_right:
	di
	ld hl, BufferAddr + TileRowSize
	ld de, BufferAddr
	exx
	ld b, Buffer_TH * TileSize
.loop
	exx
	ld bc, BufferRowSize - TileRowSize
	ldir

	ld bc, TileRowSize
	add hl, bc
	ex de, hl
	add hl, bc
	ex de, hl
	exx
	djnz .loop

	ld hl, (buffered_map_addr)
	inc hl
	ld (buffered_map_addr), hl


	; draw missing column on the right
	ld bc, Buffer_TW - 1
	add hl, bc
	ld de, BufferAddr + BufferRowSize - TileRowSize
	call prepare_map_column
	ei
	ret

scroll_buffer_left:
	di
	ld hl, BufferAddr + BufferRowSize - TileRowSize - 1
	ld de, BufferAddr + BufferRowSize - 1
	exx
	ld b, Buffer_TH * TileSize

.loop
	exx
	ld bc, (Buffer_TW - 1) * TileRowSize
	lddr
	ld bc, TileRowSize * (2 * Buffer_TW - 1)
	add hl, bc
	ex de, hl
	add hl, bc
	ex de, hl
	exx
	djnz .loop

	ld hl, (buffered_map_addr)
	dec hl
	ld (buffered_map_addr), hl

	ld de, BufferAddr
	call prepare_map_column
	ei
	ret

scroll_buffer_down:
	di
	ld hl, BufferAddr + BufferRowSize * TileSize
	ld de, BufferAddr
	ld bc, LastTileRowOffset
	ldir

	ld hl, (buffered_map_addr)
	ld bc, MapSize
	add hl, bc
	ld (buffered_map_addr), hl

	; draw missing row on the bottom
	ld bc, MapSize * (Buffer_TW - 1)
	add hl, bc
	ld de, BufferAddr + LastTileRowOffset
	call prepare_map_row
	ei
	ret

scroll_buffer_up:
	di
	ld hl, BufferAddr + BufferSize - BufferRowSize * TileSize - 1
	ld de, BufferAddr + BufferSize - 1
	ld bc, BufferSize - BufferRowSize * TileSize
	lddr

	ld hl, (buffered_map_addr)
	ld bc, -MapSize
	add hl, bc
	ld (buffered_map_addr), hl

	ld de, BufferAddr
	call prepare_map_row
	ei
	ret

@redraw_map:
	di
	ld hl, (buffered_map_addr)
	ld de, BufferAddr
	ld b, 32

.loop
	push bc
	call prepare_map_row
	ld bc, MapSize - Buffer_TW
	add hl, bc
	ex de, hl
	ld bc, BufferRowSize
	add hl, bc
	ex de, hl
	pop bc
	djnz .loop
	ld a, 1
	ld (dirty_screen), a
	ei
	ret


;; hl - buffer address
;; de - attr address
;; hl' - bitmap address
;; bc' - 0xf901
copy_line:
	ld (.ret + 1), sp
	ld b, 22
.loop
	ld a, (hl)
	inc hl

	ld (de), a
	inc e
	or a
	jr z, .skipdraw

	ld a, (hl)
	ld (.setsp+1), a
	inc hl
	ld a, (hl)
	ld (.setsp+2), a
	inc hl
	exx
.setsp
	ld sp, 0

	rept 4, idx
		pop de
		ld (hl), e
		inc h
		ld (hl), d
		if idx < 3
			inc h
		endif
	endr

	add hl, bc
	exx
	djnz .loop
	jp .ret

.skipdraw
	inc hl
	inc hl
	exx
	inc l
	exx
	djnz .loop
.ret
	ld sp, 0
  	ret

	macro do_copy_line bitmap_row, attr_high_byte
		; ld hl, (buf_addr)
		ld de, attr_high_byte * 0x100 + low(bitmap_row)
		exx
		ld hl, bitmap_row
		exx
		call copy_line
	endm

	macro next_line
		ld bc, (Buffer_TW - VisibleBuffer_TW) * 6
		add hl, bc
	endm

@copy_buffer:
	exx
	ld bc, 0xf901
	exx

	ld hl, (visible_offset)
	ld b, h
	ld d, 0
	ld e, l
	ld hl, BufferAddr
	.3 add hl, de

	xor a
	or b
	jr z, 2F
	ld de, BufferRowSize
1
	add hl, de
	djnz 1B
2

	do_copy_line 0x4000, 0x58
	next_line

	do_copy_line 0x4020, 0x58
	next_line

	do_copy_line 0x4040, 0x58
	next_line

	do_copy_line 0x4060, 0x58
	next_line

	do_copy_line 0x4080, 0x58
	next_line

	do_copy_line 0x40a0, 0x58
	next_line

	do_copy_line 0x40c0, 0x58
	next_line

	do_copy_line 0x40e0, 0x58
	next_line

	do_copy_line 0x4800, 0x59
	next_line

	do_copy_line 0x4820, 0x59
	next_line

	do_copy_line 0x4840, 0x59
	next_line

	do_copy_line 0x4860, 0x59
	next_line

	do_copy_line 0x4880, 0x59
	next_line

	do_copy_line 0x48a0, 0x59
	next_line

	do_copy_line 0x48c0, 0x59
	next_line

	do_copy_line 0x48e0, 0x59
	next_line

	do_copy_line 0x5000, 0x5a
	next_line

	do_copy_line 0x5020, 0x5a
	next_line

	do_copy_line 0x5040, 0x5a
	next_line

	do_copy_line 0x5060, 0x5a
	next_line

	do_copy_line 0x5080, 0x5a
	next_line

	do_copy_line 0x50a0, 0x5a

	ld a, 0
	ld (dirty_screen), a
	ret

@scroll_map_right:
	ld hl, (map_coord)
	inc hl
	ld a, MapSize * 2 - VisibleBuffer_TW * 2 + 1
	cp l
	ret z
	ld (map_coord), hl

	ld a, (visible_offset.column)
	inc a
	cp 3
	jr nz, .noredraw
	call scroll_buffer_right
	ld a, 1

.noredraw
	ld (visible_offset.column), a
	ld (dirty_screen), a
	ret

@scroll_map_left:
	ld hl, (map_coord)
	dec l
	ret m
	ld (map_coord), hl

	ld a, (visible_offset.column)
	sub 1
	jr nc,	.noredraw
	call scroll_buffer_left
	ld a, 1

.noredraw
	ld (visible_offset.column), a
	inc a
	ld (dirty_screen), a
	ret

@scroll_map_down:
	ld hl, (map_coord)
	inc h
	ld a, MapSize * 2 - VisibleBuffer_TH * 2 + 1
	cp h
	ret z
	ld (map_coord), hl

	ld a, (visible_offset + 1)
	inc a
	cp 3
	jr nz, .noredraw
	call scroll_buffer_down
	ld a, 1

.noredraw
	ld (visible_offset.row), a
	ld (dirty_screen), a
	ret

@scroll_map_up:
	ld hl, (map_coord)
	dec h
	ret m
	ld (map_coord), hl

	ld a, (visible_offset + 1)
	sub 1
	jr nc,	.noredraw
	call scroll_buffer_up
	ld a, 1

.noredraw
	ld (visible_offset.row), a
	inc a
	ld (dirty_screen), a
	ret

	endmodule
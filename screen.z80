;; the map size is everywhere assumed to be 32x32
	define MAP_SIZE 32
	define ACTIVE_MAP_BUFFER 0xc000

	macro copy_2_lines
		pop de
		ld (hl), e
		inc l
		ld (hl), d
		inc h
		pop de
		ld (hl), d
		dec l
		ld (hl), e
	endm

	macro copy_8_lines
		copy_2_lines
		inc h
		copy_2_lines
		inc h
		copy_2_lines
		inc h
		copy_2_lines
	endm

;;  in:
;;	  hl - tile address
;;    de - screen address
;;    ix - attribute address
;;    z flag - draw only attrs
draw_tile:
	ld (.ret+1), sp
	ld sp, hl
	ex de, hl

	jr z, .draw_attrs

	copy_8_lines

	ld bc, 0xf920
	add hl, bc

	copy_8_lines

.draw_attrs
	pop hl
	ld (ix), l
	ld (ix+1), h
	pop hl
	ld (ix+32), l
	ld (ix+33), h

.ret
	ld sp, 0
	ret

draw_map:
	; ld a, 2
	; out (254), a

	halt
	di

	ld hl, ACTIVE_MAP_BUFFER
	ld de, 0x4000
	ld ix, 0x5800
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4
	ld de, 0x4040
	ld ix, 0x5840
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4 * 2
	ld de, 0x4080
	ld ix, 0x5880
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4 * 3
	ld de, 0x40c0
	ld ix, 0x58c0
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4 * 4
	ld de, 0x4800
	ld ix, 0x5900
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4 * 5
	ld de, 0x4840
	ld ix, 0x5940
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4 * 6
	ld de, 0x4880
	ld ix, 0x5980
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4 * 7
	ld de, 0x48c0
	ld ix, 0x59c0
	call draw_active_map_row
	ld hl, ACTIVE_MAP_BUFFER + 11 * 4 * 9
	ld de, 0x5000
	ld ix, 0x5a00
	call draw_active_map_row

	call draw_hero
	ei

	; ld a, 0
	; out (254), a

.ret
	ret

draw_hero:
	ld de, 0x4800 + 32 * 2 + 12
	ld ix, 0x5800 + 32 * 10 + 12
	or d  ;; set z = 0
.sethero
	ld hl, hero_right
	call draw_tile
	ret

@move_down:
	ld hl, (map_position)
	ld a, h
	inc a
	cp MAP_SIZE
	ret z
	ld h, a

	call update_map_addr
	ret nz

	ld a, 0b01000000
	ld (movement_mask), a

	ld (map_position), hl
	call update_map_buffer
	ret

@move_up:
	ld hl, (map_position)
	dec h
	ret m

	call update_map_addr
	ret nz
	ld (map_position), hl
	ld a, 0b10000000
	ld (movement_mask), a
	call update_map_buffer
	ret

@move_left:
	ld hl, hero_left
	ld (draw_hero.sethero + 1), hl
	ld hl, (map_position)
	dec l
	ret m

	call update_map_addr
	ret nz
	ld (map_position), hl
	ld a, 0b00100000
	ld (movement_mask), a
	call update_map_buffer
	ret

@move_right:
	ld hl, hero_right
	ld (draw_hero.sethero + 1), hl
	ld hl, (map_position)
	ld a, l
	inc a
	cp MAP_SIZE
	ret z

	ld l, a
	call update_map_addr
	ret nz
	ld (map_position), hl
	ld a, 0b00010000
	ld (movement_mask), a
	call update_map_buffer
	ret

; @setpos:
; 	ld bc, 0
; 	add hl, bc
; 	ld (map_position), hl
; 	ret

;; check if the map can be moved to the new position
;; update map address if it's possible
;; in:
;;   hl - map position (h - row, l - column)
;; out:
;;   z - set if the position has changed
update_map_addr:
	;; bc	 = h * 32 + l
	ld b, 0
	ld a, h
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	add l
	ld c, a
	ld a, 0
	adc b
	ld b, a

	;; find the new hero position and check if it's empty
	push hl
	ld hl, map
	add hl, bc
	push hl
	ld bc, 32 * 5 + 6
	add hl, bc
	ld a, (hl)
	pop hl
	and 0b1111
	jr nz, .ret
	ld (map_addr), hl
.ret:
	pop hl
	ret

;; hl - buffer row address
;; de - screen row address
;; ix - row attribute start
draw_active_map_row:
	ld b, 11

.loop
	inc hl
	xor a
	cp (hl)
	jr z, .next

	inc a
	cp (hl)
	jr nz, .not_hide

	; hide the tile
	ld (ix), 0
	ld (ix+1), 0
	ld (ix+32), 0
	ld (ix+33), 0
	jr .next

.not_hide
	inc a
	cp (hl)

	jr nz, .full_redraw

	; unhide the tile
	push hl
	inc hl
	ld ($+4), hl
	ld hl, (0)

	ld a, (hl)
	ld (ix), a
	inc hl
	ld a, (hl)
	ld (ix+1), a
	inc hl
	ld a, (hl)
	ld (ix+32),  a
	inc hl
	ld a, (hl)
	ld (ix+33), a

	pop hl
	jp .next

.full_redraw
	push hl
	push de
	push bc
	inc hl
	ld ($+4), hl
	ld hl, (0)
	call draw_tile
	pop bc
	pop de
	pop hl

.next
	.3 inc hl
	.2 inc de
	.2 inc ix
	djnz .loop
	ret

init_map:
	ld hl, ACTIVE_MAP_BUFFER
	ld de, ACTIVE_MAP_BUFFER + 1
	ld (hl), 0
	ld bc, 99
	ldir
	call update_map_buffer
	ret

update_map_buffer:
	ld hl, (map_addr)
	ld de, ACTIVE_MAP_BUFFER
	rept 9, idx
		ex de, hl
		call copy_map_row_to_buffer
		ex de, hl
		ld bc, MAP_SIZE - 11
		add hl, bc
	endr
	ret

;; in: de - map row addr
;;     hl - buffer row addr
;; buffer structure: 11 * 9 entries
;;   1 byte - current tile (with high bit set if the tile is hidden)
;;   1 byte - pending action (e.g. draw, hide, unhide, keep, draw_hero)
;;   2 byte - tile data address (passed to the action as hl)
copy_map_row_to_buffer:
	ld b, 11

.loop
	ld a, (de)
	ld c, (hl)

	cp c
	jr z, .noop  ; same tile, do nothing

	bit 7, c
	jr z, .not_hidden

	or a
	jr z, .noop  ; already hidden

	or 0b10000000
	cp (hl)
	res 7, a
	jr nz, .full_redraw

.unhide
	ld (hl), a
	inc hl
	ld (hl), 2
	inc hl

	;; todo: unhide here
	push bc
	push de
	ex de, hl
	ld b, 0
	ld c, a
	ld hl, tiles_pallette
	add hl, bc
	add hl, bc
	ld ($+4), hl ; hl = (hl)
	ld hl, (0)

	ld bc, 0x20
	add hl, bc

	ex de, hl ; de - tile data address

	ld (hl), e
	inc hl
	ld (hl), d
	inc hl

	pop de
	pop bc

	inc de
	djnz .loop
	ret

.not_hidden
	or a
	jr nz, .full_redraw

.hide:
	ld a, 0b10000000
	or c
	ld (hl), a
	inc hl
	ld (hl), 1

	.3 inc hl
	inc de
	djnz .loop
	ret

.noop:
	inc hl
	xor a
	ld (hl), a
	.3 inc hl
	inc de
	djnz .loop
	ret

.full_redraw:
	ld (hl), a
	inc hl
	ld (hl), 3
	inc hl

	push bc
	push de

	ex de, hl
	ld b, 0
	ld c, a
	ld hl, tiles_pallette
	add hl, bc
	add hl, bc
	ld ($+4), hl ; hl = (hl)
	ld hl, (0)
	ex de, hl ; de - tile data address

	ld (hl), e
	inc hl
	ld (hl), d
	inc hl

	pop de
	pop bc

	inc de
	djnz .loop
	ret

movement_mask:
	db 0

map_position:
	db 0, 1

map_addr:
	dw map

map:
	incbin "res/maze.bin"

tiles_pallette:
	dw 0
	dw tile_1

; tile_0:
; 	.36 db 0

tile_1:
	incbin "res/brick.bin"
	.4 db 2

hero_right:
	incbin "res/cat-right.bin"
	.4 db 0x47

hero_left:
	incbin "res/cat-left.bin"
	.4 db 0x47


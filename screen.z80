	macro copy_2_lines
		pop de
		ld (hl), e
		inc l
		ld (hl), d
		inc h
		pop de
		ld (hl), d
		dec l
		ld (hl), e
	endm

	macro copy_8_lines
		copy_2_lines
		inc h
		copy_2_lines
		inc h
		copy_2_lines
		inc h
		copy_2_lines
	endm


;; hl - tile address
;; de - screen
draw_tile:
	ld (.ret+1), sp
	ld sp, hl
	ex de, hl

	copy_8_lines

	; inc h
	; ld a, 0x20
	; add l
	; ld l, a
	; jr c, .next8
	; ld a, h
	; sub 8
	; ld h, a

.set_next_line_shift
	ld bc, 0xf920
	add hl, bc

.next8
	copy_8_lines

.ret
	ld sp, 0
	ret

	macro locate_tile_data
		ld c, (hl)
		ld b, 0
		sla c
		rl b
		ld hl, tiles_pallette
		add hl, bc
		ld ($+4), hl
		ld hl, (0)
	endm

	macro fill_2_lines
		ld (hl), a
		inc l
		ld (hl), a
		inc h
		ld (hl), a
		dec l
		ld (hl), a
	endm

	macro fill_8_lines
		fill_2_lines
		inc h
		fill_2_lines
		inc h
		fill_2_lines
		inc h
		fill_2_lines
	endm

draw_tile_line:
	ld b, 11
.loop
	push bc
	push hl
	push de

	xor a
	ld c, (hl)
	cp c
	jr nz, .locate_tile_data

	ex de, hl
	fill_8_lines
	inc h
	ld a, 0x20
	add l
	ld l, a
	jr c, .next8
	ld a, h
	sub 8
	ld h, a
.next8
	xor a
	fill_8_lines
	ex de, hl
	jp .next

.locate_tile_data
	ld b, 0
	sla c
	rl b
	ld hl, tiles_pallette
	add hl, bc
	ld ($+4), hl
	ld hl, (0)

	call draw_tile

.next
	pop de
	pop hl
	pop bc
	inc hl
	inc de
	inc de
	djnz .loop
	ret

	macro swap_subscreen_rim
		ld a, (draw_tile.set_next_line_shift + 2)
		xor 0xf9
		ld (draw_tile.set_next_line_shift + 2), a
	endm

draw_map:
	di
	ld a, 2
	out (254), a

	ld hl, (map_addr)
	ld de, 0x4021
	push hl
	call draw_tile_line
	pop hl

	ld bc, 32
	add hl, bc
	ld de, 0x4061
	push hl
	call draw_tile_line
	pop hl

	ld bc, 32
	add hl, bc
	ld de, 0x40a1
	push hl
	call draw_tile_line
	pop hl

	swap_subscreen_rim

	ld bc, 32
	add hl, bc
	ld de, 0x40e1
	push hl
	call draw_tile_line
	pop hl

	swap_subscreen_rim

	ld bc, 32
	add hl, bc
	ld de, 0x4821
	push hl
	call draw_tile_line
	pop hl

	ld bc, 32
	add hl, bc
	ld de, 0x4861
	push hl
	call draw_tile_line
	pop hl

	ld a, 0
	out (254), a

	ld bc, 32
	add hl, bc
	ld de, 0x48a1
	push hl
	call draw_tile_line
	pop hl

	swap_subscreen_rim

	ld bc, 32
	add hl, bc
	ld de, 0x48e1
	push hl
	call draw_tile_line
	pop hl

	swap_subscreen_rim

	ld bc, 32
	add hl, bc
	ld de, 0x5021
	push hl
	call draw_tile_line
	pop hl

	call draw_hero

	ei
	ret

draw_hero:
	ld de, 0x4800 + 32 * 3 + 13
.sethero
	ld hl, hero_right
	call draw_tile
	ret

@move_down:
	ld hl, (map_position)
	ld a, h
	inc a
	cp 32
	ret z
	ld h, a

	call update_map_addr
	ret nz

	ld (map_position), hl
	ret

@move_up:
	ld hl, (map_position)
	ld a, h
	sub 1
	ret c

	ld h, a
	call update_map_addr
	ret nz
	ld (map_position), hl
	ret

@move_left:
	ld hl, hero_left
	ld (draw_hero.sethero + 1), hl
	ld hl, (map_position)
	ld a, l
	sub 1
	ret c

	ld l, a
	call update_map_addr
	ret nz
	ld (map_position), hl
	ret

@move_right:
	ld hl, hero_right
	ld (draw_hero.sethero + 1), hl
	ld hl, (map_position)
	ld a, l
	inc a
	cp 32
	ret z

	ld l, a
	call update_map_addr
	ret nz
	ld (map_position), hl
	ret

;; in:
;;   hl - map position (h - row, l - column)
;; out:
;;   z - set if position was changed
update_map_addr:
	;; bc	 = h * 32 + l
	ld b, 0
	ld a, h
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	add l
	ld c, a
	ld a, 0
	adc b
	ld b, a

	push hl
	ld hl, map
	add hl, bc
	push hl
	ld bc, 32 * 5 + 6
	add hl, bc
	ld a, (hl)
	pop hl
	or a
	jr nz, .ret
	ld (map_addr), hl
.ret:
	pop hl
	ret

@test_map:
	ld a, 0
	out (254), a

	ld hl, 0x4000+0x800*3
	ld (hl), 0b101111
	push hl
	pop de
	inc de
	ld bc, 0xff
	ldir

	ld hl, 0x4000+0x800*3+0x100
	ld (hl), 0b011111
	push hl
	pop de
	inc de
	ld bc, 0xff
	ldir

	ld hl, 0x4000+0x800*3+0x200
	ld (hl), 0b110101
	push hl
	pop de
	inc de
	ld bc, 0xff
	ldir

.forever
	halt
	di

	call draw_map

	ei
	.5 halt

	ld hl, (.setpos + 1)
	ld a, l
	xor 32
	ld l, a
	ld (.setpos + 1), hl
	ld hl, map
.setpos
	ld bc, 0
	add hl, bc
	ld (map_position), hl
	jp .forever
	ret

map_position:
	db 0, 0


map_addr:
	dw map

map:
	incbin "res/maze.bin"

tiles_pallette:
	dw tile_0
	dw tile_1

tile_0:
	.32 db 0

tile_1:
	incbin "res/brick.bin"

hero_right:
	incbin "res/cat-right.bin"

hero_left:
	incbin "res/cat-left.bin"
;; the map size is everywhere assumed to be 32x32
	define MAP_SIZE 32

	macro copy_2_lines
		pop de
		ld (hl), e
		inc l
		ld (hl), d
		inc h
		pop de
		ld (hl), d
		dec l
		ld (hl), e
	endm

	macro copy_8_lines
		copy_2_lines
		inc h
		copy_2_lines
		inc h
		copy_2_lines
		inc h
		copy_2_lines
	endm

;;  in:
;;	  hl - tile address
;;    de - screen address
;;    ix - attribute address
;;    z flag - draw only attrs
draw_tile:
	ld (.ret+1), sp
	ld sp, hl
	ex de, hl

	jr z, .draw_attrs

	copy_8_lines

	ld bc, 0xf920
	add hl, bc

	copy_8_lines

.draw_attrs
	pop hl
	ld (ix), l
	ld (ix+1), h
	pop hl
	ld (ix+32), l
	ld (ix+33), h

.ret
	ld sp, 0
	ret

;; hl - map address
;; de - screen address
;; ix - attribute start
draw_tile_line:
	ld b, 11
.loop
	push bc
	push hl
	push de

	ld c, (hl)
	ld a, (movement_mask)
	and c
	jr nz, .next

	ld a, 0b1111
	and c
	ld c, a

.locate_tile_data
	ld b, 0
	sla c
	rl b
	ld hl, tiles_pallette
	add hl, bc

	ld ($+4), hl ;; hl = (hl)
	ld hl, (0)

	or a
	call draw_tile

.next
	pop de
	pop hl
	pop bc
	inc hl
	inc de
	inc de
	inc ix
	inc ix
	djnz .loop
	ret

draw_map:
	ld hl, (map_position)
	call update_map_addr

	halt
	di
	ld a, 2
	out (254), a

	ld hl, (map_addr)
	ld de, 0x4000
	ld ix, 0x5800
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x4040
	ld ix, 0x5840
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x4080
	ld ix, 0x5880
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x40c0
	ld ix, 0x58c0
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x4800
	ld ix, 0x5900
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x4840
	ld ix, 0x5940
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x4880
	ld ix, 0x5980
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x48c0
	ld ix, 0x59c0
	push hl
	call draw_tile_line
	pop hl

	ld bc, MAP_SIZE
	add hl, bc
	ld de, 0x5000
	ld ix, 0x5a00
	push hl
	call draw_tile_line
	pop hl

	ld a, 0
	out (254), a

	call draw_hero

	ei
	ret

draw_hero:
	ld de, 0x4800 + 32 * 2 + 12
	ld ix, 0x5800 + 32 * 10 + 12
	or d  ;; set z = 0
.sethero
	ld hl, hero_right
	call draw_tile
	ret

@move_down:
	ld hl, (map_position)
	ld a, h
	inc a
	cp MAP_SIZE
	ret z
	ld h, a

	call update_map_addr
	ret nz

	ld a, 0b01000000
	ld (movement_mask), a

	ld (map_position), hl
	ret

@move_up:
	ld hl, (map_position)
	ld a, h
	sub 1
	ret c

	ld h, a
	call update_map_addr
	ret nz
	ld (map_position), hl
	ld a, 0b10000000
	ld (movement_mask), a
	ret

@move_left:
	ld hl, hero_left
	ld (draw_hero.sethero + 1), hl
	ld hl, (map_position)
	ld a, l
	sub 1
	ret c

	ld l, a
	call update_map_addr
	ret nz
	ld (map_position), hl
	ld a, 0b00100000
	ld (movement_mask), a
	ret

@move_right:
	ld hl, hero_right
	ld (draw_hero.sethero + 1), hl
	ld hl, (map_position)
	ld a, l
	inc a
	cp MAP_SIZE
	ret z

	ld l, a
	call update_map_addr
	ret nz
	ld (map_position), hl
	ld a, 0b00010000
	ld (movement_mask), a
	ret

@setpos:
	ld bc, 0
	add hl, bc
	ld (map_position), hl
	ret

;; check if the map can be moved to the new position
;; update map address if it's possible
;; in:
;;   hl - map position (h - row, l - column)
;; out:
;;   z - set if the position has changed
update_map_addr:
	;; bc	 = h * 32 + l
	ld b, 0
	ld a, h
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	sla a
	rl b
	add l
	ld c, a
	ld a, 0
	adc b
	ld b, a

	;; find the new hero position and check if it's empty
	push hl
	ld hl, map
	add hl, bc
	push hl
	ld bc, 32 * 5 + 6
	add hl, bc
	ld a, (hl)
	pop hl
	and 0b1111
	jr nz, .ret
	ld (map_addr), hl
.ret:
	pop hl
	ret

movement_mask:
	db 0

map_position:
	db 0, 1

map_addr:
	dw map

map:
	incbin "res/masked_maze.bin"

tiles_pallette:
	dw tile_0
	dw tile_1

tile_0:
	.4 db 0, 0, 0, 0

tile_1:
	incbin "res/brick.bin"
	db 21, 21, 21, 21

hero_right:
	incbin "res/cat-right.bin"
	db 1, 1, 1, 1

hero_left:
	incbin "res/cat-left.bin"
	db 1, 1, 1, 1


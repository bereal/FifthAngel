    module screen

lookup_table:
    dw 0x4000, 0x4020, 0x4040, 0x4060, 0x4080, 0x40A0, 0x40C0, 0x40E0
    dw 0x4800, 0x4820, 0x4840, 0x4860, 0x4880, 0x48A0, 0x48C0, 0x48E0
    dw 0x5000, 0x5020, 0x5040, 0x5060, 0x5080, 0x50A0, 0x50C0, 0x50E0

; h = row, l = column
pos_to_screen_addr:
    push af
    push de
    ld a, l
    ld d, 0
    ld e, h
    ld hl, lookup_table
    .2 add hl, de

    ld e, (hl)
    inc hl
    ld h, (hl)
    ld l, e

    ld e, a
    add hl, de
    pop de
    pop af
    ret

    struct screen_area
bitmap word
attr word
height byte
width byte
    ends

    macro down_row X, Y
        ld a, Y
        add 0x20
        ld Y, a
        jr nc, 1F
        ld a, X
        add 8
        ld X, a
1
    endm

; idx - area
scroll_area_up:
    push hl, bc, de, af
    ld l, (ix + screen_area.bitmap)
    ld h, (ix + screen_area.bitmap + 1)

    ld a, (ix + screen_area.height)
    dec a
    ld b, a
    ld a, 8
    jp z, .clear

    ld e, l
    ld d, h
    down_row h, l

.loop
    push bc
    ld b, 0
    push hl
    push de

    rept 8, idx
    push hl
    push de

    ld c, (ix + screen_area.width)
    ldir

    pop de
    pop hl

    if idx < 7
    inc h
    inc d
    endif
    endr

    pop de
    pop hl

    down_row d, e
    down_row h, l

    ; add hl, bc
    ; ex de, hl
    ; add hl, bc
    ; ex de, hl

    pop bc
    djnz .loop

    ; clean the last row
    ex de, hl
    ld a, 8

.clear
    push hl

    ld d, h
    ld e, l
    inc de
    ld c, (ix + screen_area.width)
    dec c
    ld (hl), b
    ldir

    pop hl
    inc h

    dec a
    jr nz, .clear

    pop af, de, bc, hl
    ret

; h = row, l = column (in cells)
; b = height, c = width (in cells)
clean_area:
    call pos_to_screen_addr
    ld a, b

.loop
    push bc



    endmodule
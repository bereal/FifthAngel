;; Copy a raw of 12x1 cells
;; DE - start of the first line data
;; HL - end or the first screen line
copy_row_12:
	ld (.restore_sp+1), sp
	ld (.set_in_sp+1), de

.loop
	ld (.set_out_sp+1), hl

.set_in_sp
	ld sp, 0
	pop af
	pop bc
	pop de
	exx
	pop bc
	pop de
	pop hl
	ld (.set_in_sp+1), sp

.set_out_sp
	ld sp, 0
	push hl
	push de
	push bc
	exx
	push de
	push bc
	push af

	inc h
	ld a, h
	and 7
	jp nz, .loop

.restore_sp
	ld sp, 0
	ret

;; Copy a raw of 10x1 cells
;; DE - start of the first line data
;; HL - end or the first screen line
copy_row_10:
	ld (.restore_sp+1), sp
	ld (.set_in_sp+1), de
	ld a, 8

.loop
	ld (.set_out_sp+1), hl

.set_in_sp
	ld sp, 0
	pop bc
	pop de
	exx
	pop bc
	pop de
	pop hl
	ld (.set_in_sp+1), sp

.set_out_sp
	ld sp, 0
	push hl
	push de
	push bc
	exx
	push de
	push bc
	inc h
	dec a
	jp nz, .loop

.restore_sp
	ld sp, 0
	ret

	define left_width      12
	define right_width     10
	define total_width     left_width + right_width
	define height          18

	define left_buffer     0
	define left_row_size   left_width * 8
	define right_row_size  right_width * 8
	define right_buffer    left_buffer + left_width * height

	macro copy_full_row n_row, dest
		ld de, left_buffer + left_row_size * n_row
		ld hl, dest + left_width
		call copy_row_12
		ld de, right_buffer + right_row_size * n_row
		ld hl, dest + total_width
		call copy_row_10
	endm

copy_buffer:
.forever
	halt
	di
	ld a, 5
	out (254), a
	copy_full_row 0, 0x4021
	copy_full_row 1, 0x4041
	copy_full_row 2, 0x4061
	copy_full_row 3, 0x4081
	copy_full_row 4, 0x40a1
	copy_full_row 5, 0x40c1
	copy_full_row 6, 0x40e1
	copy_full_row 7, 0x4801
	copy_full_row 8, 0x4821
	copy_full_row 9, 0x4841
	copy_full_row 10, 0x4841
	copy_full_row 11, 0x4861
	copy_full_row 12, 0x4881
	copy_full_row 13, 0x48a1
	copy_full_row 14, 0x48c1
	ld a, 0
	out (254), a
	ei
	jp .forever
	ret

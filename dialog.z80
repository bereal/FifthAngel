    module dialog

    struct dialog
title word
subtitle word
lines word
height byte
width byte
title_alignment byte
    ends

dialog_console console.console

; h - width
; l - height
draw_dialog:
    ld de, hl
    ld a, 0x20
    sub h
    rra
    ld b, a

    ld a, 24
    sub l
    rra
    ld h, a
    ld l, b

    ld ix, dialog_console
    ld a, 7
    halt
    call console.init
    call console.clear
    ld a, 0x47
    call screen.draw_area_border
    ; ld a, 0x47
    ; call screen.color_area_border
    ret

; ix - dialog
animate_dialog:
    push ix
    ld de, (ix + dialog.height)
    ld hl, 0x202
    bit 0, e
    jr z, .loop
    dec l

.loop
    push hl
    push de
    push bc
    .2 halt
    call draw_dialog
    ; xor a
    ; call screen.clean_area
    pop bc
    pop de
    pop hl

    ld b, 0

    ld a, e
    cp l

    jr z, 1F
    .2 inc l
    inc b

1
    ld a, d
    cp h
    jr z, 2F
    .2 inc h
    inc b

2
    ld a, b
    or a
    jr z, .end
    jr .loop

.end
    pop ix
    ret

count_newlines:
    ld b, 0
    ld a, h
    or a
    ret z
    inc b
1
    ld a, (hl)
    or a
    ret z
    cp 13
    jr nz, 2F
    inc b
2
    inc hl
    jr 1B

; ix - dialog
open_dialog:
    push ix
    ld hl, (ix + dialog.height)
    call draw_dialog
    pop ix

    ld de, (ix + dialog.lines)
    push de
    ld de, (ix + dialog.subtitle)
    ld hl, (ix + dialog.title)
    ld ix, dialog_console

    call console.println
    call console.newline ; print title

    ex de, hl
    push hl
    call count_newlines
    pop hl

    ld a, b
    or a
    jr z, 1F

    push af
    call console.println
    call console.newline
    pop af
    inc a

1
    add 2
    ld (.align_row + 1), a
    pop hl
.loop
    ld e, (hl)
    inc hl
    ld a, (hl)
    or a
    jr z, .printed

    ld d, a
    ex de, hl
    call console.println
    inc b
    ex de, hl
    inc hl
    jr .loop

.printed

    dec b
    ld c, 0 ; selected item

.select_loop
    .10 halt
    ld a, c
.align_row
    add 2
    call screen.invert_row
1
    call read_key
    jr z, 1B
    cp 'A'
    jr nz, .not_down
    ld a, c
    cp b
    jr nc, 1B
    add 2
    call screen.invert_row
    inc c
    jr .select_loop

.not_down
    cp 'Q'
    jr nz, .not_up
    ld a, c
    or a
    jr z, 1B
    add 2
    call screen.invert_row
    dec c
    jr .select_loop

.not_up
    cp 'M'
    jr z, .activate
    cp ' '
    jr nz, 1B

.activate
    ld a, c
    add 2
    call screen.invert_row
    ld a, c

    ret

    endmodule